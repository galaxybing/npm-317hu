#!/usr/bin/env node

'use strict';

var fs = require('fs');
var path = require('path');
var argv = require('yargs')
    .usage('Usage: $0 <name> [option]')
    .example('npm317hu lodash', 'Save lodash to dependencies')
    .example('npm317hu lodash --dev', 'Save lodash to devDependencies')
    .example('npm317hu lodash mocha', 'Save lodash and mocha to dependencies')
    .example('npm317hu lodash mocha --dev', 'Save lodash and mocha to devDependencies')
    .boolean('d')
    .alias('d', 'dev')
    .describe('d', 'Save package to devDependencies')
    .help('h')
    .alias('h', 'help')
    .alias('v', 'version')
    .version(function () {
      return require('../package.json').version; // echo version
    }).argv;

var colors = require('colors');
var pwd = process.cwd();
var execCommond = argv._.length > 0 ? argv._[0] : 'none';
var pkgNames = argv._.length > 1 ? argv._.slice(1) : [];

// exec npm install
var spawn = require('child_process').spawn;
var npm317huProcess = spawn("bash"); // spawn("/bin/bash");
function onData(data) {
  process.stdout.write(data);
}
npm317huProcess.on('error', function () {
  console.log("error");
  console.log(arguments);
});

npm317huProcess.stdout.on('data', onData); //
npm317huProcess.stderr.on('data', onData); // catch err?
npm317huProcess.on('close', (code) => {
  console.log(colors.green('Installing...'));
  var pkgs = {};
  pkgNames.forEach(function (pkgName) {
    pkgs[pkgName] = '^' + getPkgConfig('node_modules/' + pkgName).version;
  });
  saveDeps(pkgs);
});

// npm317huProcess.stdin.write('cd / \n');
// npm317huProcess.stdin.write('pwd \n');
// npm317huProcess.stdin.write('ls');
if (pkgNames.length === 0 && execCommond === 'install') {
  // collect @317huDependencies packages
  var pkgNamesObj = getPkgConfig()[`@317huDependencies`];
  var pkgNamesArr = [];
  // Object.keys(pkgNamesObj).forEach(
  for (var key in pkgNamesObj) {
    pkgNamesArr.push(key+'@'+pkgNamesObj[key]);
  }
  npm317huProcess.stdin.write(`npm -d --registry=http://registry.npm.intra.317hu.com ${execCommond} ${pkgNamesArr.join(' ')}  \n`);
} else {
  npm317huProcess.stdin.write(`npm -d --registry=http://registry.npm.intra.317hu.com ${execCommond} ${pkgNames.join(' ')}  \n`);
}

npm317huProcess.stdin.end();

/**
 * read file and write file
 *
 * @param {Object} pkgs - packages object to be saved
 */
function saveDeps (pkgs) {
  fs.readFile(path.resolve(pwd, 'package.json'), function (err, data) {
    if (err) {
      console.error(err);
      process.exit(1);
    }

    var pkgObj = JSON.parse(data);
    /*
    if (argv.dev) {
      pkgObj.devDependencies = addPkgsToDepObj(pkgs, pkgObj.devDependencies || {});
    } else { // default config
      // pkgObj.dependencies = addPkgsToDepObj(pkgs, pkgObj.dependencies || {});

      // addPkgsToDepObj(pkgs, pkgObj[`@317huDependencies`] || {}); // inlined 
      // 
      // 处理 @317huDependencies 字段原来没有，需要新生成情况（进行赋值操作）：
      pkgObj[`@317huDependencies`] = addPkgsToDepObj(pkgs, pkgObj[`@317huDependencies`] || {});
    }
    */

    pkgObj[`@317huDependencies`] = addPkgsToDepObj(pkgs, pkgObj[`@317huDependencies`] || {});


    var pkgStr = JSON.stringify(pkgObj, null, 2); // 序列化对象所有的属性，并设置 2 个空格缩进排版
    fs.writeFile(path.resolve(pwd, 'package.json'), pkgStr, function (err) {
      if (err) {
        console.error(err);
        process.exit(1);
      } else {
        console.log(colors.green('Successfully installed.'));
        Object.keys(sortObject(pkgs)).forEach(function (key) {
          console.log(colors.green(' %s \n'), key + '@' + pkgs[key]);
        });
      }
      

    });
  });
}

/**
 * add package info to dependencies object and sort by keys
 *
 * @param {Object} pkgs - packages object to be added
 * @param {Object} depObj - dependencies object
 * @return {Object} sortedDepObj - sorted dependencies object after added packages
 */
function addPkgsToDepObj (pkgs, depObj) {
  Object.keys(pkgs).forEach(function (key) {
    depObj[key] = pkgs[key];
  });

  return sortObject(depObj);
}

/**
 * get package version from node_modules/packageName/package.json
 *
 * @param {String} pkgName - package name
 * @return {String} version - package version
 */
function getPkgConfig (pkgName) {
  var pkgPath;
  if (pkgName) {
    pkgPath = path.resolve(pwd, pkgName, 'package.json');
  } else {
    pkgPath = path.resolve(pwd, 'package.json');
  }
  var pkg;

  if (fs.existsSync(pkgPath)) {
    pkg = require(pkgPath);
  } else {
    console.error((new Error('Cannot find package "' + pkgName + '" in node_modules')).stack);
    process.exit(1);
  }

  return pkg;
}

/**
 * sort object by keys
 *
 * @param {Object} obj - object to be sorted
 * @return {Object} sortedObj - sorted object
 */
function sortObject (obj) {
  var sortedObj = {};

  Object.keys(obj).sort().forEach(function (key) {
    sortedObj[key] = obj[key];
  });

  return sortedObj;
}
